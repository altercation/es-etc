-------------------------------------------------------------------------------
-- xmonad.hs - Ethan Schoonover - es@ethanschoonover.com
-------------------------------------------------------------------------------
--
-- Intent
-- keep xmonad.hs config as minimal as possible while achieving
-- functionality goals. prune when possible.
--
-- Highlights & Functionality
-- * initially designed for use on an 11.6 inch laptop (x100e)
--   with intent to scale to desktop
-- * heavy use of tabbed layouts (TabBarDecoration, not tabbed)
-- * combination layouts with tabbed "sidebar" and single master
-- * smart relocation of windows
-- * web apps that open indepenedently of main browser (chrome)
-- * prompts
-- * scratchpad style console, system monitoring
-------------------------------------------------------------------------------
--IMPORTS

import Control.Monad
import Data.List
import qualified Data.Map as M		-- map creation
import Graphics.X11.Xinerama		-- getScreenInfo, etc.
import System.IO
import System.Exit			-- shutdown xmonad
import System.Process
import XMonad hiding ((|||))		-- core xmonad libraries
-- hiding is used with XMonad import due to CycleSelectLayouts
-- and the also requisite LayoutCombinators
import qualified XMonad.StackSet as W	-- window stackset manipulation
import XMonad.Actions.CopyWindow	-- pin windows across workspaces
import XMonad.Actions.CycleSelectedLayouts -- subset used layouts
import XMonad.Actions.CycleWS
import XMonad.Actions.Promote		-- used for master swap
import XMonad.Actions.RotSlaves		-- useful with twopane
import XMonad.Actions.Search		-- awesome search functions
import XMonad.Actions.Submap		-- submap key shortcuts
import XMonad.Actions.Warp		-- warp cursor
import XMonad.Actions.WithAll		-- killAll, etc.
import XMonad.Actions.WindowGo		-- runOrRaiseNext, etc.
import XMonad.Hooks.DynamicLog		-- workspace statusbar output
import XMonad.Hooks.EwmhDesktops	-- fixes statusbar momentary coverup 
import XMonad.Hooks.FadeInactive	-- fade inactive windows via xcompmgr
import XMonad.Hooks.ManageDocks		-- avoid status bars, panels
import XMonad.Hooks.ManageHelpers	-- check isfloat, do dofloat, et al
import XMonad.Hooks.UrgencyHook		-- display urgent alerts/popups
import XMonad.Layout.LayoutCombinators	-- used with CycleSelectedLayouts
import XMonad.Layout.ComboP		-- combine layouts w/property placement
import XMonad.Layout.Decoration		-- utilize themes
import XMonad.Layout.MultiToggle	-- lilu dallas
import XMonad.Layout.MultiToggle.Instances -- basic multitoggle types
import XMonad.Layout.Named		-- allow renaming of layouts
import XMonad.Layout.NoBorders		-- remove borders from windows
import XMonad.Layout.PerWorkspace	-- allows layout sets per workspace
import XMonad.Layout.TabBarDecoration	-- tabbar instead of tabbed: faster
import XMonad.Layout.ResizeScreen	-- used to make room for tabs
import XMonad.Layout.Simplest		-- handles tabbar better than Full
import XMonad.Layout.TwoPane		-- simple two pane layout
import XMonad.Layout.WindowNavigation	-- used to swap windows in ComboP
import XMonad.Prompt			-- quick action and terminal prompts
import XMonad.Prompt.AppendFile		-- append text to file
import XMonad.Prompt.AppLauncher	-- launch application with parameters
import XMonad.Prompt.Input		-- gen input prompt (using for search)
import XMonad.Prompt.Shell		-- shell prompt
import XMonad.Prompt.RunOrRaise		-- run/raise existing window
import XMonad.Prompt.Window		-- goto or bring window
import XMonad.Util.Cursor		-- change X cursor
import XMonad.Util.EZConfig             -- better key configuration
import XMonad.Util.Run			-- spawnPipe, et al
import XMonad.Util.NamedScratchpad	-- quickly summon/banish utility apps
-- from pbrisbin
import SendFile
-------------------------------------------------------------------------------
--MAIN

main :: IO ()
main = do			myStartup
				s <- spawnPipe myStatusBarL
				spawn myStatusBarR
				xmonad	$ ewmh 
					$ myUrgencyHook 
					$ myXMonadConfig s 
-------------------------------------------------------------------------------
--OPTIONS

myBorderWidth			= 1
myTerminal			= "urxvtc" -- client to the urxvt daemon
myChromePath        = "/usr/bin/chromium"
myChromeClass       = "Chrome"
myBrowserPath       = myChromePath
myBrowserClass      = myChromeClass
-------------------------------------------------------------------------------
--THEME
-- JANUS     16/8 TERMCOLOR  HEX     XTERM   XTERM HEX   L*A*B
-- base03     8/4 br black   #00151b   233   #121212     05 -07 -07
-- base02     0/4 black      #17282e   234   #1c1c1c     15 -06 -06
-- base01    10/7 br green   #3b494e   236   #303030     30 -05 -05
-- base00    11/7 br yellow  #5e6d73   239   #4e4e4e     45 -05 -05
-- base0     12/6 br blue    #77878c   242   #6c6c6c     55 -05 -05
-- base1     14/4 br cyan    #9eaeb4   246   #949494     70 -05 -05
-- base2      7/7 white      #d2d5cf   252   #d0d0d0     85 -02  03
-- base3     15/7 br white   #f7f0dd   230   #ffffd7     95  00  10
-- green      2/2 green      #93a707    64   #548700     65 -20  65
-- yellow     3/3 yellow     #b58900   172   #d78700     60  10  65
-- orange     9/3 br red     #bb3e07   130   #af5f00     45  50  55
-- red        1/1 red        #b71818   124   #af0000     35  60  45
-- magenta    5/5 magenta    #d92983   161   #d7005f     50  70 -05
-- violet    13/5 br magenta #6c71c4    61   #5f5faf     50  15 -45
-- blue       4/4 blue       #247ebb    26   #005fd7     50 -10 -40
-- cyan       6/6 cyan       #3cafa5    37   #00afaf     65 -35 -05
janusbase03                 = "#00151b"
janusbase02                 = "#17282e"
janusbase01                 = "#3b494e"
janusbase00                 = "#5e6d73"
janusbase0                  = "#77878c"
janusbase1                  = "#9eaeb4"
janusbase2                  = "#d2d5cf"
janusbase3                  = "#f7f0dd"
janusgreen                  = "#93a707"
janusyellow                 = "#b58900"
janusorange                 = "#bb3e07"
janusred                    = "#b71818"
janusmagenta                = "#d92983"
janusviolet                 = "#6c71c4"
janusblue                   = "#247ebb"
januscyan                   = "#3cafa5"
myColorDesktop              = janusbase03
myColorBackgroundInactive   = janusbase02
myColorBackgroundActive     = janusbase01
myColorBackgroundUrgent     = janusyellow
myColorTextInactive         = janusbase01
myColorTextActive           = janusbase00
myColorTextUrgent           = myColorBackgroundUrgent
myColorBorderInactive       = myColorBackgroundActive
myColorBorderActive         = myColorBackgroundActive
myColorBorderUrgent         = myColorBackgroundUrgent
myFont                  	= "-*-terminus-medium-*-*-*-" 
				++ show myFontSize
				++ "-*-*-*-*-*-*-*"
				-- ++ "-*-*-*-*-*-iso8859-*"
myFontSmall                  	= "-*-terminus-medium-*-*-*-" 
				++ show myFontSizeSmall
				++ "-*-*-*-*-*-*-*"
myFontExtraSmall               	= "-*-terminus-medium-*-*-*-" 
				++ show myFontSizeExtraSmall
				++ "-*-*-*-*-*-*-*"
myFontBig			= "-*-terminus-bold-*-*-*-" 
				++ show myFontSizeBig
				++ "-*-*-*-*-*-*-*"
myFontSize              	= 20 -- terminus includes 12,14,16,20,22,28,32
myFontSizeSmall              	= 16
myFontSizeExtraSmall           	= 14
myFontSizeBig              	= 28
myStatusBarPadding      	= 2 
myStatusBarHeight       	= myFontSize+myStatusBarPadding
myTabBarHeight			:: Dimension
myTabBarHeight			= myStatusBarHeight
--getScreenDimensions		= do
--				  (sx, sy, sw, sh) <- getScreenDim
myMonWidth			= 1366
myStatusBarLWidth		= 550
myStatusBarL			= "dzen2 -title-name 'statusBarL'"
				++ " -bg '" ++ myColorBackgroundInactive ++ "'"
				++ " -fg '" ++ myColorTextInactive ++ "'"
				++ " -sa c"
				++ " -fn '" ++ myFont ++ "'"
				++ " -h " ++ show myStatusBarHeight
				++ " -w " ++ show myStatusBarLWidth
				++ " -x 0 -y 0 -ta l -e 'onstart=lower'"
myStatusBarRVol			= "report-volume-inotify |"
myStatusBarRVolDzen		= "dzen2 -title-name 'statusBarR'"
				++ " -bg '" ++ myColorBackgroundInactive++ "'"
				++ " -fg '" ++ myColorTextInactive ++ "'"
				++ " -sa c"
				++ " -fn '" ++ myFont ++ "'"
				++ " -h " ++ show myStatusBarHeight
				++ " -w " 
				++ show (myMonWidth-myStatusBarLWidth)
				++ " -x " ++ show myStatusBarLWidth
				++ " -y 0 -ta r "
myStatusBarR			= "conky -c ~/etc/xmonad/conky_statusbar.conf |"
				++ " dzen2 -title-name 'statusBarR'"
				++ " -bg '" ++ myColorBackgroundInactive++ "'"
				++ " -fg '" ++ myColorTextInactive ++ "'"
				++ " -sa c"
				++ " -fn '" ++ myFont ++ "'"
				++ " -h " ++ show myStatusBarHeight
				++ " -w " 
				++ show (myMonWidth-myStatusBarLWidth)
				++ " -x " ++ show myStatusBarLWidth
				++ " -y 0 -ta r -e 'onstart=lower'"
myAlertBar			= "dzen2 -title-name 'alertBar'"
				++ " -bg '" ++ myColorBackgroundUrgent++ "'"
				++ " -fg '" ++ myColorBackgroundInactive ++ "'"
				++ " -sa c"
				++ " -fn '" ++ myFont ++ "'"
				++ " -h " ++ show myStatusBarHeight
				++ " -w " 
				++ show myMonWidth
				++ " -x 0"
				++ " -y 50 -ta r "
-- | Get the number of available screens.
getScreenCount :: Num a => X a
getScreenCount = io getScreenCount'
 
getScreenCount' :: Num a => IO a
getScreenCount' = do
    d <- openDisplay ""
    screens  <- getScreenInfo d
    return $ fromInteger $ toInteger $ length screens
 
-- | Return the dimensions (x, y, width, height) of screen n.
getScreenDim :: Num a => Int -> IO (a, a, a, a)
getScreenDim n = do
    d <- openDisplay ""
    screens  <- getScreenInfo d
    closeDisplay d
    let rn = screens!!(min (abs n) (length screens - 1))
    case screens of
        []        -> return $ (0, 0, 1024, 768) -- fallback
        [r]       -> return $ (fromIntegral $ rect_x r , fromIntegral $ rect_y r , fromIntegral $ rect_width r , fromIntegral $ rect_height r )
        otherwise -> return $ (fromIntegral $ rect_x rn, fromIntegral $ rect_y rn, fromIntegral $ rect_width rn, fromIntegral $ rect_height rn)
 
-------------------------------------------------------------------------------
--LOG
-- dzenColor myColorTextInactive
--myColorBackgroundInactive . myWrap

myLogHook			:: Handle -> X ()
myLogHook statusBar		= do
				  fadeInactiveLogHook 0.75		
    				  dynamicLogWithPP $ defaultPP {
	  ppCurrent		= dzenColor myColorTextActive 
				  myColorBackgroundInactive . myWrap
	, ppVisible		= dzenColor myColorTextActive 
				  myColorBackgroundInactive . myWrap
	, ppHidden		= dzenColor myColorTextInactive
				  myColorBackgroundInactive . myWrap 
	, ppHiddenNoWindows	= namedOnly
 	, ppUrgent		= dzenColor myColorBackgroundInactive 
				  myColorBackgroundUrgent . myWrap
 	, ppSep			= " "
 	, ppWsSep		= ""
	, ppTitle		= dzenColor myColorTextActive "" 
				. shorten 50 . wrap " " ""
 	, ppLayout		= dzenColor myColorTextActive 
				  myColorBackgroundInactive . renameLayouts
-- 	, ppOrder		=
 	, ppSort		= fmap (.namedScratchpadFilterOutWorkspace) 
				$ ppSort defaultPP
--  	, ppExtras		= [ LS.logCmd "acpi -b"
-- 				, LS.loadAvg
-- 				, LS.date "%a %b %d %H.%M.%S"
-- 				, LS.logCmd "acpi -t"
-- 				, LS.logCmd "nm-tool |grep State " ]
	, ppOutput		=  hPutStrLn statusBar -- . wrap "" ""
	}
myPad				:: String -> String
myPad				= wrap ":" ":"
myWrap				:: String -> String
myWrap				= wrap " " " "
namedOnly ws 			= if any (`elem` ws) ['a'..'z'] then
				  myPad ws else ""
renameLayouts s			= case s of
	"Accordion"		-> wrapIcon "es/layout_accordion_01_right.xbm"
	"Tab"			-> wrapIcon "es/layout_tabbed_top.xbm"
	"Marginalia"		-> wrapIcon "es/layout_vert_6040_02up.xbm"
	"Wide"			-> wrapIcon "es/layout_horz_6040_02up.xbm"
	"Full"			-> wrapIcon "es/layout_full_top.xbm"
	"Max"			-> wrapIcon "es/layout_max_square_arrows.xbm"
	_                               -> s
	where
		wrapIcon icon	= "^i(" ++ myIconsPath ++ icon ++ ")^p(5)"
		myIconsPath	= "/usr/share/icons/"
-------------------------------------------------------------------------------
--WORKSPACES

myWorkspaces			= ["TTY","WEB","COMS","MAIL","DEV","SYS"] 
				++ map show [6..9]
-------------------------------------------------------------------------------
--LAYOUT

-- $ myToggles 
myLayout 			= windowNavigation
 				$ unBorders 
 				$ myLayouts
	where
	myLayouts		= ( simpleTab 
				||| tallTab 
				||| marginalia 
				||| madMax )
	myLayoutSets		= (onWorkspace "TTY" 
				( twopane 
				||| twoTab 
				||| tall 
				||| simpleTab 
				||| marginalia )
				$ onWorkspaces ["WEB","COMS"] 
				  (simpleTab ||| marginalia)
				$ (simpleTab ||| marginalia ||| tall) )
	marginalia		= named "Marginalia" 
				$ avoidStruts $ combineTwoP 
				  twopane simpleTab simpleTab 
				  (marginaliaMatchRules)
	-- the following match rules determine which windows
	-- show up in the "master" (left in this case) pane
	-- of the ComboP layout
	-- TODO: would be nice to either collect all app related
	-- options in one area or to abstract this information
	-- into individual app records
	marginaliaMatchRules	= ClassName "Chromium" `Or`
				  ClassName "Chromium-browser" `Or`
				  ClassName "Firefox" `Or`
				  ClassName "ChromiumAppMode" `Or`
                  ClassName myChromeClass `Or`
                  ClassName myBrowserClass `Or`
				  Title "mutt"
	twopane			= named "Two" 
				$ avoidStruts $ TwoPane resizeDelta goldenRatio
	tall			= named "Split" 
				$ avoidStruts
				$ Tall 1 resizeDelta goldenRatio 
	makeTabs l		= tabBar CustomShrink myTabTheme Top 
				$ resizeVertical (fi $ decoHeight myTabTheme)
				$ l
	simpleFull		= named "Full" $ avoidStruts $ Simplest
	simpleTab		= named "Tab" 
				$ avoidStruts $ makeTabs $ Simplest
	tallTab			= named "TallTab" 
				$ avoidStruts $ makeTabs $ tall 
	madMax			= named "MadMax" $ Full
	twoTab			= named "TwoTab" 
				$ avoidStruts $ makeTabs $ twopane
	resizeDelta		= 3/100
	goldenRatio		= toRational $ 2/(1 + sqrt 5 :: Double)
	--unBorders 		= noBorders
	unBorders 		= lessBorders (XMonad.Layout.NoBorders.Never)
				-- equiv to smartBorders, better for Xinerama
myTabTheme :: Theme
myTabTheme = defaultTheme
	{ activeColor 		= myColorBackgroundActive
	, inactiveColor 	= myColorBackgroundInactive
	, urgentColor 		= myColorBackgroundUrgent
	, activeBorderColor 	= myColorBorderActive
	, inactiveBorderColor 	= myColorBorderInactive
	, urgentBorderColor 	= myColorBorderUrgent
	, activeTextColor 	= myColorTextUrgent
	, inactiveTextColor 	= myColorTextInactive
	, urgentTextColor 	= myColorBackgroundInactive
	, fontName		= myFont
	-- below commented out to allow xmobar and
	-- tab bars to take same/similar height
	-- automatically based on font size
	, decoHeight 		= myTabBarHeight
	--, decoWidth 		= 30
	}
instance Shrinker CustomShrink where
	-- shrinkIt _ s = [""] -- this is a dummy shrinker for testing
  	shrinkIt shr s | Just s' <- dropFromHead " " s = shrinkIt shr s'
  	shrinkIt shr s | Just s' <- dropFromTail " " s = shrinkIt shr s'
  	shrinkIt shr s | Just s' <- dropFromTail 
				" - es@ethanschoonover.com" s = shrinkIt shr s'
  	shrinkIt shr s | Just s' <- dropFromTail 
				" - Google Docs" s = shrinkIt shr s'
  	shrinkIt shr s | Just s' <- dropFromHead 
				"es@theta:" s = shrinkIt shr s'
  	shrinkIt shr s | Just s' <- dropFromHead 
				"Ethan Schoonover - " s = shrinkIt shr s'
  	shrinkIt shr s | Just s' <- dropFromHead 
				"Ethan Schoonover " s = shrinkIt shr s'
  	shrinkIt shr s | Just s' <- dropFromHead 
				"http://" s = shrinkIt shr s'
  	shrinkIt _ s | n > 9 
		= s : map cut [2..(halfn-3)] ++ shrinkIt shrinkText s
 		where
			n = length s
 			halfn = n `div` 2
 			rs = reverse s
			cut x = take (halfn - x) s ++ "..." ++ 
				reverse (take (halfn-x) rs)
 	shrinkIt _ s = shrinkIt shrinkText s
dropFromTail			:: String -> String -> Maybe String
dropFromTail "" _ 		= Nothing
dropFromTail t s | drop (length s - length t) s == t = Just 
				$ take (length s - length t) s | otherwise 
				= Nothing
dropFromHead :: String -> String -> Maybe String
dropFromHead "" _ = Nothing
dropFromHead h s | take (length h) s == h = Just 
				$ drop (length h) s | otherwise = Nothing
-------------------------------------------------------------------------------
--STARTUP & SHUTDOWN

myStartup			:: IO () -- may need to be X if in xmonad conf
myStartup			= do 
					mySetBackground
					mySetCursor
					myStartTerminalDaemon
					--myStartSystemTray
					--myStartCompositing
					--myFixSystemTray
					-- spawn myScreensaver
--myScreensaver			= spawn "xscreensaver -no-splash &"
mySetBackground			= spawn 
				$ "hsetroot -solid '" ++ myColorDesktop ++ "'"
mySetCursor			= spawn
				$ "xsetroot -cursor_name left_ptr " 
				++ "&& unclutter -root &"
--mySetCursor			= setDefaultCursor xC_left_ptr
--myCursorHousekeeping		= spawn "unclutter -root &"
myStartTerminalDaemon		= spawn 
				$ "urxvtd -f -o"
--myStartSystemTray		= spawn
--				$ "stalonetray -c "
--				++"~/conf/xmonad/stalonetrayrc "
--myFixSystemTray			= spawn
--				$ "sleep 1; transset-df -a -n 'stalonetray' "
--				++"-m 0 -x 0.5 0.5"
--myStartCompositing		:: X ()
--myStartCompositing		= spawn
--				$ "cairo-compmgr &"
--myStartCompositing		= spawn
--				$ "xcompmgr -cfF -I0.03 -O0.03 -D4 -r0 -o0"
myRestart			:: X ()
myRestart			= spawn 
				$  myRestartKill "xmobar"
				++ myRestartKill "conky"
				++ myRestartKill "dzen2"
				++ myRestartKill "stalonetray"
				++ myRestartKill "trayer"
				++ myRestartKill "xcompmgr"
				++ myRestartKill "cairo-compmgr"
				++ myRestartKill "report-volume"
				++ "xmonad --recompile && xmonad --restart"
myRestartKill			:: String -> String
myRestartKill p			= "for pid in `pgrep " ++ p 
				++ "`; do kill -9 $pid; done && "
-------------------------------------------------------------------------------
--EVENTS

-- fullscreenEventHook currently (oct2010) only in darcs
-- this allows apps like chromium to go full screen with F11
-- by handling the _NET_WM_STATE protocol, including users of the
-- gtk_window_fullscreen() function
-- see XMonad.Hooks.EwmhDesktops
myHandleEventHook		= fullscreenEventHook
-------------------------------------------------------------------------------
--MANAGE

myManageHook :: ManageHook
myManageHook                    = mainManageHook
                                <+> manageDocks 
                                <+> manageFullScreen
				<+> manageScratchpad where
--    manageFullScreen    	= do
--				isFullscreen --> doF W.focusDown<+>doFullFloat
    manageFullScreen    	= isFullscreen --> doFullFloat
    manageScratchpad		:: ManageHook
    manageScratchpad		= namedScratchpadManageHook myScratchpads
    mainManageHook		= composeAll $ concat
	[ [ resource  =? r --> 	doIgnore	| r <- myIgnores	]
	, [ className =? c --> 	doShift "WEB"	| c <- myWebApps	]
	, [ className =? c --> 	doShift "COMS"	| c <- myComsApps	]
	, [ name      =? "mutt"  --> doShift "MAIL"			]
	, [ className =? c --> 	doFloat		| c <- myFloats		]
	, [ className =? c --> 	doCenterFloat	| c <- myCenterFloats	]
	, [ name      =? n --> 	doCenterFloat	| n <- myCenterNames	]
	, [ isDialog	   --> 	doCenterFloat				]
	] where
	classNotRole		:: (String,String) -> Query Bool
	classNotRole (c,r)      = className =? c <&&> role /=? r
	classAndTitle (c,t)     = fmap (t `isPrefixOf`) title 
				<&&> className =? c
	role                    = stringProperty "WM_WINDOW_ROLE"
	name                    = stringProperty "WM_NAME"
    -- previously had stalonetray listed as an ignore but am now managing
    -- it as a normal window for use as a scratchpad
	myIgnores               = ["desktop","desktop_window","screenkey"]
	myWebApps               = [myChromeClass, myBrowserClass,
                               "Chrome","Chromium","Chromium-browser","Firefox"]
	myComsApps              = ["ChromiumAppMode"]
	myVisApps               = ["Gimp"]
	myFloats                = ["Gimp","Skype","MPlayer"]
	myCenterFloats          = ["Xmessage","Save As...","XFontSel"
				  ,"Gtk-recordMyDesktop"]
	myCenterNames           = ["bashrun","Screen Layout Editor"]
-------------------------------------------------------------------------------
--SCRATCHPADS

toggleScratchpad sp		= namedScratchpadAction myScratchpads sp
myScratchpads			= [
	-----------------------------------------------------------------------
	-- skype
	  NS 			"systray"
				"stalonetray -c $CONF_PATH/xmonad/stalonetrayrc"
				(title =? "stalonetray")
				defaultFloating
	-----------------------------------------------------------------------
	-- skype
	, NS 			"skype"
				"skype"
				(resource =? "skype")
				centWindow
	-----------------------------------------------------------------------
	-- htop
	, NS			"htop"
				(myTerminal
				++ " -fn " ++ show myFontSmall 
				++ " -fb " ++ show myFontSmall
				++ " -fi " ++ show myFontSmall
				++ " -fbi " ++ show myFontSmall
				++ " +sb "
				++ " -b 15"
				++ " -e htop")
				(title =? "htop")
				centWindow
	-----------------------------------------------------------------------
	-- terminal
	, NS 			"scratchterm"
				(myTerminal
				++ termFontBig
				++ " -name scratchterm")
				(resource =? "scratchterm")
				lowerThird
	-----------------------------------------------------------------------
	-- wifi-radar
	, NS 			"wifiradar"
				"sudo wifi-radar"
				(title =? "WiFi Radar")
				centWindow
	-----------------------------------------------------------------------
	-- wifi-select
	, NS			"wifi"
				(myTerminal
				++ termFont
				++ " -name wifiselect"
				++ " -e 'wifi'")
				(resource =? "wifiselect")
				centSquare
	-----------------------------------------------------------------------
	-- mixer
	, NS			"mixer"
				(myTerminal
				++ termFontBig
				++ " -e alsamixer")
				(title =? "alsamixer")
				centWindowBig
	-----------------------------------------------------------------------
	-- cal-month
	, NS			"quickcalmonth"
				(myTerminal
				++ " -fn " ++ show myFontExtraSmall 
				++ " -fb " ++ show myFontExtraSmall
				++ " -fi " ++ show myFontExtraSmall
				++ " -fbi " ++ show myFontExtraSmall
				++ " +sb "
				++ " -b 15"
				++ " -cr '#101010'"
				++ " -name quickcalmonth"
				++ " -e cal-month-view")
				(resource =? "quickcalmonth")
				centWindowMax
	-----------------------------------------------------------------------
	-- cal-month
	, NS			"quickcalweek"
				(myTerminal
				++ " -fn " ++ show myFontSmall 
				++ " -fb " ++ show myFontSmall
				++ " -fi " ++ show myFontSmall
				++ " -fbi " ++ show myFontSmall
				++ " +sb "
				++ " -b 15"
				++ " -cr '#101010'"
				++ " -name quickcalweek"
				++ " -e cal-week-view")
				(resource =? "quickcalweek")
				centWindowThin
	] where
		termFont	=  " -fn " ++ show myFont
				++ " -fb " ++ show myFont
				++ " -fi " ++ show myFont
				++ " -fbi " ++ show myFont
		termFontSmall	=  " -fn " ++ show myFontSmall
				++ " -fb " ++ show myFontSmall
				++ " -fi " ++ show myFontSmall
				++ " -fbi " ++ show myFontSmall
		termFontBig	=  " -fn " ++ show myFontBig
				++ " -fb " ++ show myFontBig
				++ " -fi " ++ show myFontBig
				++ " -fbi " ++ show myFontBig
		centWindow	= (customFloating
                                $ W.RationalRect (1/6) (1/6) (2/3) (2/3))
		centWindowBig	= (customFloating
                                $ W.RationalRect (1/8) (1/8) (3/4) (3/4))
		centWindowMax	= (customFloating
                                $ W.RationalRect (1/30) (1/20) (14/15) (9/10))
		centWindowThin	= (customFloating
                                $ W.RationalRect (1/30) (1/4) (28/30) (1/2))
		centSquare	= (customFloating
                                $ W.RationalRect (1/3) (1/4) (1/3) (1/2))
		lowerThird	= (customFloating
                                $ W.RationalRect (0) (2/3) (1) (1/3))
	-- rationalrect coordinates =
	-- horizontal offset from left side of screen in ratio of screen width
	-- vertical offset from top side of screen in ratio of screen height
	-- window width as ratio of screen width
	-- window height as ratio of screen height
-------------------------------------------------------------------------------
--URGENCY

myUrgencyHook			= withUrgencyHook NoUrgencyHook
-------------------------------------------------------------------------------
--MOUSE & KEYBOARD

--all defaults are redefined here, even when no changes, as master list of
--shortcuts and for clarity in planning
--
myModMask			= mod1Mask -- 1=alt, 4=super
myFocusFollowsMouse		= False
--myMouseBindings
myKeys s = myKeymap (myXMonadConfig s)
--myKeys :: [(String, X())]
myKeymap conf = 
-- mod-[1..],       		Jump to workspace N
-- mod-shift-[1..],  		Move client and then Jump to ws N
-- mod-ctrl-[1..],		Jump to workspace N on other screen
-- mod-ctrl-shift-[1..],	Move client, jump to ws N on other screen
	[ (m ++ "M-" ++ [k], f i)
	| (i, k) <- zip (XMonad.workspaces conf) "1234567890-=[]\\"
	-- jump to workspace N
	, (f, m) <- [ (windows . W.view, "")
	--
	-- this example does a simple "normal" move client to workspace N
	-- , (windows . W.shift, "S-")
	--
	-- move window and jump to workspace N
	, (\ws -> (windows . W.shift $ ws) >> (windows . W.view $ ws), "S-")
	--
	-- jump to workspace N on other screen
	, (\ws -> nextScreen >> (windows . W.view $ ws), "C-")
	--
	-- move window and jump to workspace N on other screen
	, (\ws -> nextScreen >> (windows . W.view $ ws) >> shiftNextScreen, "C-S-")
	]
	]
	++
	[
	-----------------------------------------------------------------
	-- Xmonad Kill and Restart
	  ("M-q", 		myRestart				) 
	, ("M-S-q", 		io (exitWith ExitSuccess)		)
	-- Window kill and kill all
	, ("M-c", 		kill					) 
	, ("M-S-c", 		killAll					) 
	, ("M-u", 		testAlert				)
	, ("M4-q", 		shiftNextScreen				)
	-----------------------------------------------------------------
	-- Window Layout
	, ("M-n",		refresh					)
	, ("M-<Space>",		cycleLayouts				)
	, ("M-x",		cycleMax				)
	, ("M-S-x",		layoutMaximize				)
-- 	, ("M4-S-b",		sendMessage $ ToggleStruts		)
-- 	, ("M4-S-f",		sendMessage $ Toggle FULL		)
-- 	, ("M4-S-r",		sendMessage $ Toggle MIRROR		)
-- 	, ("M4-S-u",		focusUrgent				)
	-----------------------------------------------------------------
	-- Window Navigation, Layout & Movement
	--
	-- Window stack navigation 
	, ("M-f",		windows W.focusDown			)
	, ("M-b",		windows W.focusUp			)
	-- Window stack navigation 
	, ("M-S-f",		windows W.swapDown			)
	, ("M-S-b",		windows W.swapUp			)
	-- Window stack movement
	, ("M-C-h",		sendMessage Shrink			)
	, ("M-C-l",		sendMessage Expand			)
	-- Window directional navigation 
	, ("M-h",		sendMessage $ Go L			)
	, ("M-k",		sendMessage $ Go U			)
	, ("M-j",		sendMessage $ Go D			)
	, ("M-l",		sendMessage $ Go R			)
	-- Window directional movement
	-- Swap works on normal layouts, Move on combo, they can be
	-- safely doubled up here
	, ("M-S-h",		(sendMessage $ Swap L) >> 
				(sendMessage $ Move L)			)
	, ("M-S-k",		(sendMessage $ Swap U) >> 
				(sendMessage $ Move U)			)
	, ("M-S-j",		(sendMessage $ Swap D) >> 
				(sendMessage $ Move D)			)
	, ("M-S-l",		(sendMessage $ Swap R) >> 
				(sendMessage $ Move R)			)
	-- Window directional navigation 
	, ("M-<Left>",		sendMessage $ Go L			)
	, ("M-<Up>",		sendMessage $ Go U			)
	, ("M-<Down>",		sendMessage $ Go D			)
	, ("M-<Right>",		sendMessage $ Go R			)
	-- Window directional movement
	-- Swap works on normal layouts, Move on combo, they can be
	-- safely doubled up here
	, ("M-S-<Left>",	(sendMessage $ Swap L) >> 
				(sendMessage $ Move L)			)
	, ("M-S-<Up>",		(sendMessage $ Swap U) >> 
				(sendMessage $ Move U)			)
	, ("M-S-<Down>",	(sendMessage $ Swap D) >> 
				(sendMessage $ Move D)			)
	, ("M-S-<Right>",	(sendMessage $ Swap R) >> 
				(sendMessage $ Move R)			)
	-- Window directional movement in combo panes
	, ("M-C-<Left>",	sendMessage $ Move L			)
	, ("M-C-<Up>",		sendMessage $ Move U			)
	, ("M-C-<Down>",	sendMessage $ Move D			)
	, ("M-C-<Right>",	sendMessage $ Move R			)
	-- Window stack alternate navigation
	, ("M-<Tab>",		rotAllUp				) 
	, ("M-S-<Tab>",		sendMessage $ SwapWindow		) 
	, ("M-C-<Tab>",		rotSlavesUp				)
	--, ("M-m",		windows W.focusMaster			)
	-- following line handles non-combo layouts with promote which
	-- doesn't work on combo layouts, so they pay attention to the
	-- SwapWindow message (in turn ineffective on normal layouts)
	-- TODO: not quite working the way I want
	, ("M-m",		promote >> (sendMessage $ SwapWindow)	)
 	, ("M-S-m",		windows W.swapMaster			)
	, ("M-t",		withFocused $ windows . W.sink		)
	, ("M-p",		windows copyToAll			)
	, ("M-S-p",		killAllOtherCopies			)
	-----------------------------------------------------------------
	-- Prompt Shortcuts
	, ("M-a", 		appendFilePrompt myPromptConfig myNotes	) 
	, ("M-S-r", 		runOrRaisePrompt myPromptConfig		) 
	, ("M-r", 		shellPrompt myPromptConfig		) 
	, ("M-w", 		windowPromptGoto myPromptConfig 	)
	, ("M-s", 		promptSearch myPromptConfig multi
				>> doJump "WEB" 			)
	, ("M-g", 		googleCLPrompt myPromptConfig
				googleCLServices			) 
	, ("M-v", 		launchApp myPromptConfig "mplayer"	)
	--, ("M-S-s", 		sendFilePrompt myPromptConfig 
	--			"~/mail/contacts/addresses.txt"		)
	-----------------------------------------------------------------
	-- Action Shortcuts
	, ("M-o", 		banishCursor				) 
	, ("M-S-s", 		spawn $ "/usr/local/bin/quicksync"	) 
	, ("M-<F7>", 		manageDisplays				) 
	-----------------------------------------------------------------
	-- Hot Keys
	, ("<Print>", 		printScreenFull				) 
	, ("S-<Print>", 	printScreenWin				) 
	, ("C-<Print>", 	recordScreenFull			) 
	, ("<XF86Display>", 	videoSwitch				)
	-----------------------------------------------------------------
	-- Scratchpad Shortcuts
	, ("M4-h", 		toggleScratchpad "htop"			) 
	, ("M4-u", 		toggleScratchpad "scratchterm"		) 
	, ("M4-<Space>", 	toggleScratchpad "scratchterm"		) 
	, ("M4-w", 		toggleScratchpad "wifi"			) 
	, ("M4-x", 		toggleScratchpad "mixer"		) 
	, ("M4-S-m", 		toggleScratchpad "quickcalmonth"	) 
	, ("M4-S-w", 		toggleScratchpad "quickcalweek"	) 
	, ("M4-S-s", 		toggleScratchpad "skype"	) 
	, ("M4-S-y", 		toggleScratchpad "systray"	) 
	-----------------------------------------------------------------
	-- Application Shortcuts
	, ("M4-a", 		kickstartApps				) 
 	, ("M4-s", 		kickstartSecondary			) 
 	, ("M4-b", 		myBrowser				) 
 	, ("M4-m", 		myMail					) 
 	, ("M4-k", 		myTasks					) 
 	, ("M4-l", 		myCalendar				) 
 	, ("M4-p", 		myContacts				) 
 	, ("M4-o", 		myDocs					) 
 	, ("M4-S-o", 		myDocsNew				) 
 	, ("M4-n", 		myNews					) 
 	, ("M4-v", 		myVault					) 
	] where
	showAlert s		= spawn $ "echo \"" ++ s ++ "\" | " 
				++myAlertBar
	myNotes			= "/home/es/notes.txt"
	cycleLayouts		= cycleThroughLayouts
				[ "Tab", "Marginalia"]
	cycleMax		= cycleThroughLayouts ["MadMax", "Tab"]
	printScreenFull		= do
				  spawn $ "/usr/local/bin/scrotupload"
				  showAlert "Screen Captured"
	testAlert		= showAlert "Test"
	printScreenWin		= spawn
				$ "import -window `xwininfo"
				++" | grep 'Window id:' |cut -d\" \" -f4` "
				++"screenshot_w_$(date +%Y%m%d_%H%M%S).png"
-- 	printScreenWin		= spawn
-- 				$ "import -window `xwininfo"
-- 				++" | grep 'Window id:' |cut -d\" \" -f4` "
-- 				++"screenshot_w_$(date +%Y%m%d_%H%M%S).png"
-- 	recordScreenFullSilent	= spawn
-- 				$ "recordmydesktop "
-- 				++"-stop-shortcut \"Control+Print\" "
-- 				++"--no-sound"
--	recordScreenFull	= spawn $ "gtk-recordMyDesktop"
	videoSwitch		= spawn $ "video-switch"
	recordScreenFull	= spawn $ "xvidcap"
	banishCursor		:: X ()
 	banishCursor		= warpToWindow 1 1
	doJump ws		= windows (W.view ws)
 	layoutMaximize		= do
 				sendMessage $ JumpToLayout "MadMax"
 				spawn $ "transset-df -a -n 'statusBarL' -t 0.0"
 				spawn $ (
 				 "transset-df -a -n 'statusBarR' -v -t 0.0 "
 				 ++"| if grep -q 'Set Property to 1'; "
 				 ++"then transset-df -a -n 'stalonetray' 0.5; "
 				 ++"else transset-df -a -n 'stalonetray' 0.0; "
 				 ++"fi" )
	manageDisplays		= runOrRaise "arandr" (title =? "Screen Layout Editor")
	myBrowser		= runOrRaiseNext MYbROWSERpATh (className =? myBrowserClass)
	kickstartApps		:: X ()
	kickstartApps		= do
				myNews
				myDocs
				myContacts
				myTasks
				myCalendar
				myMail
				myVault
	kickstartSecondary	= spawn "skype"
	raiseByMatch		:: String -> String -> X ()
	raiseByMatch u m	= raiseNextMaybe
				(spawn $ (appBaseCommandurl $ u) ) 
				(className =? "ChromiumAppMode" 
				<&&> (fmap (\t -> isPrefixOf m t 
				|| isSuffixOf m t) title)) 
	launchNew		:: String -> X ()
	launchNew u		= spawn $ (appBaseCommandurl $ u) 
	appBaseCommandurl	:: String -> String
	appBaseCommandurl u	= myChromePath
                ++" --class=ChromiumAppMode "
				++" --name==chromiumappmode "
				++" --user-data-dir="
				++"/home/es/.config/chromium-app-mode "
				++" --app=" ++ u
	myMutt			= raiseMaybe
				(spawn $ (myTerminal ++ " -e mutt"))
				(title =? "mutt")
	myMail			= raiseByMatch "https://mail.google.com"
				"Ethan Schoonover Mail"
	myTasks			= raiseByMatch "https://mail.google.com/tasks/canvas" 
				"Tasks"
	myContacts		= raiseByMatch "https://www.google.com/contacts" 
				"Ethan Schoonover contacts"
	myCalendar		= raiseByMatch "https://calendar.google.com" 
				"Ethan Schoonover - Calendar"
	myDocs			= raiseByMatch "https://docs.google.com" 
				"Google Docs"
	myDocsNew		= launchNew "https://docs.google.com" 
	myNews			= raiseByMatch "https://reader.google.com" 
				"Google Reader"
	myVault			= raiseByMatch "chrome-extension://hdokiejnpimakedhajhdlcegeplioahd/homelocal.html"
				"My LastPass Vault"
-------------------------------------------------------------------------------
--PROMPTS

myPromptConfig :: XPConfig
myPromptConfig = defaultXPConfig
        { font			= myFont
        , bgColor		= myColorBackgroundInactive
        , fgColor		= myColorTextUrgent
        , fgHLight		= myColorTextUrgent
        , bgHLight		= myColorBackgroundActive
        , borderColor		= myColorBorderInactive
        , promptBorderWidth	= 0
        , height		= myStatusBarHeight
        }
googleCLServices = ["calendar","docs","picasa","blogger","youtube","contacts"]
googleCLPrompt :: XPConfig -> [String] -> X ()
googleCLPrompt c serviceList =
	inputPromptWithCompl c "google service" 
		(mkComplFunFromList serviceList) ?+ \googleCLService ->
	inputPrompt c "command" ?+ \googleCLCommand ->
	inputPrompt c "content" ?+ \googleCLContent ->
	runProcessWithInput "google" 
		[googleCLService, googleCLCommand] googleCLContent 
		>> return ()
-------------------------------------------------------------------------------
--XMONAD CONFIG

myXMonadConfig s = defaultConfig
	{ borderWidth		= myBorderWidth
	, workspaces		= myWorkspaces
	, layoutHook		= myLayout
	, terminal		= myTerminal
	, normalBorderColor	= myColorBorderInactive
	, focusedBorderColor	= myColorBorderUrgent
	, modMask		= myModMask
	--, keys		= myKeys
	, logHook		= myLogHook s 
 	, startupHook		= return () >>
				  checkKeymap (myXMonadConfig s)
				  (myKeys s)
	--, mouseBindings	= myMouseBindings
	, manageHook		= myManageHook
	, handleEventHook	= myHandleEventHook
	, focusFollowsMouse	= myFocusFollowsMouse
	} `additionalKeysP` (myKeys s)
